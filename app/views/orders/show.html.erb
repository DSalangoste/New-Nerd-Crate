<div class="container mx-auto px-4 py-8">
  <div class="bg-white rounded-lg shadow-lg p-6">
    <h1 class="text-2xl font-bold mb-6">Order #<%= @order.id %></h1>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
      <div>
        <h2 class="text-lg font-semibold mb-4">Order Details</h2>
        <div class="space-y-2">
          <p><span class="font-medium">Order Date:</span> <%= @order.created_at.strftime("%B %d, %Y") %></p>
          <p><span class="font-medium">Status:</span> <span class="<%= @order.status == 'completed' ? 'text-green-600' : 'text-yellow-600' %>"><%= @order.status.titleize %></span></p>
          <p><span class="font-medium">Total Amount:</span> <%= number_to_currency(@order.total) %></p>
        </div>
      </div>

      <div>
        <h2 class="text-lg font-semibold mb-4">Shipping Address</h2>
        <div class="space-y-2">
          <p><%= @order.shipping_address.full_name %></p>
          <p><%= @order.shipping_address.address_line_1 %></p>
          <% if @order.shipping_address.address_line_2.present? %>
            <p><%= @order.shipping_address.address_line_2 %></p>
          <% end %>
          <p><%= @order.shipping_address.city %>, <%= @order.shipping_address.province.code %> <%= @order.shipping_address.postal_code %></p>
          <p><%= @order.shipping_address.country %></p>
        </div>
      </div>
    </div>

    <h2 class="text-lg font-semibold mb-4">Order Items</h2>
    <div class="space-y-4">
      <% @order_items.each do |item| %>
        <div class="flex items-center border-b pb-4">
          <div class="w-20 h-20 flex-shrink-0">
            <div class="w-full h-full bg-gray-200 rounded flex items-center justify-center">
              <span class="text-gray-400">No image</span>
            </div>
          </div>
          <div class="ml-4 flex-grow">
            <h3 class="font-medium"><%= item.crate_type.name %></h3>
            <p class="text-gray-600">Quantity: <%= item.quantity %></p>
            <p class="text-gray-600">Price: <%= number_to_currency(item.price_cents / 100.0) %></p>
          </div>
          <div class="text-right">
            <p class="font-medium"><%= number_to_currency((item.quantity * item.price_cents) / 100.0) %></p>
          </div>
        </div>
      <% end %>
    </div>

    <div class="mt-6 border-t pt-4">
      <div class="flex justify-between items-center">
        <span class="font-medium">Subtotal:</span>
        <span><%= number_to_currency(@order.subtotal_cents / 100.0) %></span>
      </div>
      <div class="flex justify-between items-center mt-2">
        <span class="font-medium">Tax:</span>
        <span><%= number_to_currency(@order.tax_cents / 100.0) %></span>
      </div>
      <div class="flex justify-between items-center mt-2">
        <span class="font-medium">Shipping:</span>
        <span><%= number_to_currency(@order.shipping_cents / 100.0) %></span>
      </div>
      <div class="flex justify-between items-center mt-4 pt-2 border-t">
        <span class="font-bold">Total:</span>
        <span class="font-bold"><%= number_to_currency(@order.total) %></span>
      </div>
    </div>
  </div>
</div>

<%= content_for :head do %>
  <script src="https://js.stripe.com/v3/"></script>
<% end %>

<%= javascript_tag do %>
  document.addEventListener('DOMContentLoaded', function() {
    const stripe = Stripe('<%= Rails.configuration.stripe[:publishable_key] %>');
    let elements;

    initialize();
    checkStatus();

    document
      .querySelector("#payment-form")
      .addEventListener("submit", handleSubmit);

    async function initialize() {
      const response = await fetch("/orders/<%= @order.id %>/payment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ order_id: <%= @order.id %> })
      });
      const { clientSecret } = await response.json();

      const appearance = {
        theme: 'stripe'
      };
      elements = stripe.elements({ appearance, clientSecret });

      const paymentElement = elements.create("payment");
      paymentElement.mount("#payment-element");
    }

    async function handleSubmit(e) {
      e.preventDefault();
      setLoading(true);

      const { error } = await stripe.confirmPayment({
        elements,
        confirmParams: {
          return_url: "<%= order_url(@order) %>",
        },
      });

      if (error) {
        const messageDiv = document.querySelector("#error-message");
        messageDiv.textContent = error.message;
      }

      setLoading(false);
    }

    function checkStatus() {
      const clientSecret = new URLSearchParams(window.location.search).get(
        "payment_intent_client_secret"
      );

      if (!clientSecret) {
        return;
      }

      stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {
        switch (paymentIntent.status) {
          case "succeeded":
            window.location.href = "/orders/<%= @order.id %>/confirmation";
            break;
          case "processing":
            showMessage("Your payment is processing.");
            break;
          case "requires_payment_method":
            showMessage("Your payment was not successful, please try again.");
            break;
          default:
            showMessage("Something went wrong.");
            break;
        }
      });
    }

    function setLoading(isLoading) {
      const submitButton = document.querySelector("#submit");
      submitButton.disabled = isLoading;
      submitButton.textContent = isLoading ? "Processing..." : "Pay Now";
    }

    function showMessage(messageText) {
      const messageDiv = document.querySelector("#error-message");
      messageDiv.textContent = messageText;
    }
  });
<% end %> 